name: "Terraform Deployment"
on:
  # Manual trigger
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  # call_packer:
  #   name: calling packer ami
  #   uses: SnipeIT-IAC/.github/workflows/packer-ami.yml

  terraform:
    name: ${{matrix.runner}} - ${{ matrix.environment }}
    runs-on: "${{ matrix.runner }}"
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: test
            runner: ubuntu-latest
          - environment: prod
            runner: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-south-1

    steps:
      - name: Checking Out
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          rm -rf .terraform
          terraform init -upgrade=true -no-color -input=false

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   id: apply
      #   run: terraform apply -auto-approve -input=false

      # - name: Terraform destroy
      #   if: github.ref == 'refs/heads/destroy'
      #   id: destroy
      #   run: terraform destroy -auto-approve -input=false

  comment:
    runs-on: ubuntu-22.04
    needs: terraform
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Thanks for reporting!'
            })
